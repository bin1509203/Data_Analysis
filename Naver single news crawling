# 이번 글에서는 동아일보와 한겨레신문에서 특정 키워드를 포함하는 기사를 긁어오기 전 예제로 
# 네이버포털의 뉴스기사를 긁어 오는 것을 먼저 연습하도록 하겠습니다.

from bs4 import BeautifulSoup # urllib을 통해 받은 RESPONSE(HTML)를 파싱하기 위한 Beautiful Soup
import urllib.request # HTTP REQUEST를 보내고 HTTP RESPONSE를 받기 위한 urllib
 
# 출력 파일 명 상수로 할당
OUTPUT_FILE_NAME = 'M:\Python_temp\output.txt' # 기사내용을 긁어와 저장할 파일명
# 긁어 올 URL 주소 상수로 할당
URL = 'http://news.naver.com/main/read.nhn?mode=LSD&mid=shm&sid1=103&oid=055'\
      '&aid=0000445667'
 
 
# 크롤링 함수 : 해당 URL주소로 요청을 보내고 받아 기사 내용을 파싱해 하나의 문자열로 저장하는 함수
def get_text(URL):
    # urlopen메소드를 통해 URL주소에 대한 요청을 보내 source_code_from_URL 변수에 그 결과를 저장
    source_code_from_URL = urllib.request.urlopen(URL)

    # HTML코드를 파싱하기 위해 16번째 줄에서 source_code_from_URL을 이용, BeautifulSoup객체를 생성해 soup에 할당
    # BeautifulSoup객체 생성자의 2번째 인자로 'lxml'을 사용해 기존 'html'방식 대신 'lxml'방식으로 파싱을 했고, 
    # 한글 내용이 포함된 기사이기 때문에 from_encoding 키워드 인자로 'utf-8'을 넣어 'UTF-8'방식으로 인코딩
    soup = BeautifulSoup(source_code_from_URL, 'lxml', from_encoding='utf-8')
   
    # 이 후, soup객체에서 원하는 부분(HTML요소)만 가지고 와야 합니다. 
    # 우선 우리가 가지고 올 기사의 본문 내용이 포함된 태그(HTML 요소)가 무엇인지를 크롬 개발자도구로 찾아야합니다.
    # 자세히 살펴보면 본문 내용은 id가 'articleBodyContents'인 'div'클래스 안에 담겨 있음을 알 수 있습니다
    # 따라서 우리가 생성한 객체 soup에서 위에서의 'div'클래스를 가져오기만 하면 됩니다

    text = '' # 본문 내용을 저장하기 위해 text에 빈 문자열을 할당

    # soup객체의 find_all 메소드를 이용해 id가 'articleBodyContents'인 'div'클래스를 모두 뽑아내고
    # for문을 통해 뽑힌 요소 하나하나에 다시 한번 직접 접근
    for item in soup.find_all('div', id='articleBodyContents'):
        # for문으로 뽑혀진 각 요소 item에 find_all 메소드를 사용, text 키워드 인자에 True를 
        # 넣어 텍스트 요소만 뽑아 문자열로 치환한 후, text 문자열에 이어 붙였습니다. 
        text = text + str(item.find_all(text=True))
    return text # text를 반환
 
    # 본문 내용이 포함된 요소가 'div'클래스 하나인데 for문을 쓴 이유는
    # 1. find_all 메소드의 반환 객체가 인자로 주어진 조건을 만족하는 모든 요소들을 순환가능한 객체로 주어지기 때문에 사용
    # 2. 다른 신문사의 경우, 본문 내용이 동일한 id를 갖는 동일한 여러개의 태그에 나뉘어 할당되어있는 경우도 있기 때문
 
# 메인 함수 : 메인 함수를 별도로 만들고 __name__을 이용해 main함수를 실행시켰습니다.
def main():
    open_output_file = open(OUTPUT_FILE_NAME, 'w')
    result_text = get_text(URL)
    open_output_file.write(result_text)
    open_output_file.close()

# OUTPUT_FILE_NAME상수를 통해 txt파일을 생성하고, get_text함수를 사용해 기사내용을 result_text에 할당했습니다. 
# 이 후, 오픈한 output_file에 기사를 쓰고 닫았습니다
    
 
if __name__ == '__main__':
    main()

# 출처: http://yoonpunk.tistory.com/6 [윤빵꾸의 공부노트]
